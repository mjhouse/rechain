        -:    0:Source:inc/error.hpp
        -:    0:Programs:5
        -:    1:/*
        -:    2: * ReChain: The distributed research journal
        -:    3: * Copyright (C) 2018  Michael House
        -:    4: * 
        -:    5: * This program is free software: you can redistribute it and/or modify
        -:    6: * it under the terms of the GNU General Public License as published by
        -:    7: * the Free Software Foundation, either version 3 of the License, or
        -:    8: * (at your option) any later version.
        -:    9: * 
        -:   10: * This program is distributed in the hope that it will be useful,
        -:   11: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   12: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   13: * GNU General Public License for more details.
        -:   14: * 
        -:   15: * You should have received a copy of the GNU General Public License
        -:   16: * along with this program.  If not, see <http://www.gnu.org/licenses/>.
        -:   17: *
        -:   18: * Contact: michaelhouse@gmx.us
        -:   19: *
        -:   20:*/
        -:   21:
        -:   22:#ifndef _ERROR_HPP_
        -:   23:#define _ERROR_HPP_
        -:   24:
        -:   25:#include <exception>
        -:   26:#include <sstream>
        -:   27:
        -:   28:/** ReChain namespace to prevent collisions
        -:   29:	with exceptions from libraries
        -:   30:*/
        -:   31:namespace rechain {
        -:   32:
        -:   33:	/** An exception that is thrown when an object
        -:   34:		is unable to load from a file.
        -:   35:	*/
    #####:   36:	class LoadFailure : public std::runtime_error {
        -:   37:		private:
        -:   38:			/** The path that failed to load */
        -:   39:			std::string path;
        -:   40:
        -:   41:		public:
        -:   42:			/** Constructor that takes a path to the failed file
        -:   43:				\param p The path that failed to load
        -:   44:			*/
    #####:   45:			LoadFailure( std::string p ) : std::runtime_error("failed to load path"), path(p) {}
        -:   46:
        -:   47:			/** An overloaded 'what' method
        -:   48:				\returns A failure message for the exception
        -:   49:			*/
    #####:   50:			virtual const char* what() const throw() {
    #####:   51:				std::stringstream stream;
    #####:   52:				stream << runtime_error::what() << ": " << get_path();
        -:   53:
    #####:   54:				return stream.str().c_str();
        -:   55:			}
        -:   56:
        -:   57:			/** A getter for the path variable
        -:   58:				\returns The path as a string
        -:   59:			*/
    #####:   60:			std::string get_path() const { return path; }
        -:   61:
        -:   62:	};
        -:   63:
        -:   64:}
        -:   65:
        -:   66:#endif
