        -:    0:Source:inc/block.hpp
        -:    0:Programs:5
        -:    1:/*
        -:    2: * ReChain: The distributed research journal
        -:    3: * Copyright (C) 2018  Michael House
        -:    4: * 
        -:    5: * This program is free software: you can redistribute it and/or modify
        -:    6: * it under the terms of the GNU General Public License as published by
        -:    7: * the Free Software Foundation, either version 3 of the License, or
        -:    8: * (at your option) any later version.
        -:    9: * 
        -:   10: * This program is distributed in the hope that it will be useful,
        -:   11: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   12: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   13: * GNU General Public License for more details.
        -:   14: * 
        -:   15: * You should have received a copy of the GNU General Public License
        -:   16: * along with this program.  If not, see <http://www.gnu.org/licenses/>.
        -:   17: *
        -:   18: * Contact: michaelhouse@gmx.us
        -:   19: *
        -:   20:*/
        -:   21:
        -:   22:#ifndef _BLOCK_HPP_
        -:   23:#define _BLOCK_HPP_
        -:   24:
        -:   25:// dependency includes
        -:   26:#include <cryptopp/osrng.h>		// for the AutoSeededRandomPool
        -:   27:#include <cryptopp/integer.h>	// for Integer data type
        -:   28:
        -:   29:// system includes
        -:   30:#include <vector>
        -:   31:#include <chrono>
        -:   32:#include <string>
        -:   33:
        -:   34:/* Maximum hash value (smaller increases difficulty) */
        -:   35:#define HASH_MAX  	"000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
        -:   36:
        -:   37:class Data;
        -:   38:
        -:   39:/** A Block to be included in a BlockChain. The Block
        -:   40:	holds any number of Data objects (that represent
        -:   41:	publications or signatures), a hash of the previous
        -:   42:	Block and various hashing variables.
        -:   43:*/
        -:   44:
        -:   45:class Block {
        -:   46:	private:
        -:   47:		std::vector<std::shared_ptr<Data>> data;		/**< Contained Data objects*/
        -:   48:		std::string previous;					/**< Hash of the previous block */
        -:   49:
        -:   50:		long nonce;						/**< Randomly generated value to modify hash */
        -:   51:		long timestamp;						/**< A timestamp */
        -:   52:		unsigned int counter;					/**< Counter to modify hash output */
        -:   53:
        -:   54:		/** Generate a new random long between 1 and LONG_MAX
        -:   55:			\returns A random number
        -:   56:		*/
        -:   57:		inline long new_nonce(){
        -:   58:			CryptoPP::AutoSeededRandomPool rng;
        -:   59:			return CryptoPP::Integer(rng,CryptoPP::Integer(1),CryptoPP::Integer(LONG_MAX)).ConvertToLong();
        -:   60:		}
        -:   61:
        -:   62:		/** Get a UNIX timestamp
        -:   63:			\returns a timestamp as a long
        -:   64:		*/
        -:   65:		inline long new_timestamp(){
        -:   66:			auto e = std::chrono::system_clock::now().time_since_epoch();
        -:   67:			auto seconds = std::chrono::duration_cast<std::chrono::seconds>(e).count();
        -:   68:			return (long)seconds;
        -:   69:		}
        -:   70:
        -:   71:	public:
        7:   72:		Block() : nonce(0), timestamp(0), counter(0) {}
        7:   73:		~Block(){}
        -:   74:
        -:   75:		/** Get the hash of this block
        -:   76:			\returns The current hash of the block
        -:   77:		*/
        -:   78:		std::string hash();
        -:   79:
        -:   80:		/** Update the hashing variables
        -:   81:		*/
        -:   82:		void change_hash();
        -:   83:
        -:   84:		/** Get a data block given the signature
        -:   85:			\param s The signature of the block to return
        -:   86:			\returns The requested Data block
        -:   87:		*/
        -:   88:		std::shared_ptr<Data> get_data( std::string s );
        -:   89:
        -:   90:		/** Add a Data block
        -:   91:			\param d The block to add
        -:   92:			\returns True if Data was added
        -:   93:		*/
        -:   94:		bool add_data( std::shared_ptr<Data> d );
        -:   95:
        -:   96:		/** Remove a Data block
        -:   97:			\param s The signature of the block to remove
        -:   98:			\return True if found
        -:   99:		*/
        -:  100:		void remove_data( std::string s );
        -:  101:		
        -:  102:		/** Get the hash of the previous block
        -:  103:		    \returns The hash of the previous block
        -:  104:		*/
        -:  105:		std::string get_previous();
        -:  106:
        -:  107:
        -:  108:		/** Set the hash of the previous block
        -:  109:		    \param h The hash to set
        -:  110:		*/
        -:  111:		void set_previous( std::string h );
        -:  112:
        -:  113:		/** Get number of Data objects in the Block
        -:  114:			\returns Size of the Block as size_t
        -:  115:		*/
        -:  116:		size_t size();
        -:  117:};
        -:  118:
        -:  119:#endif
