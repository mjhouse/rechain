        -:    0:Source:/usr/include/cryptopp/argnames.h
        -:    0:Programs:5
        -:    1:#ifndef CRYPTOPP_ARGNAMES_H
        -:    2:#define CRYPTOPP_ARGNAMES_H
        -:    3:
        -:    4:#include "cryptlib.h"
        -:    5:
        -:    6:NAMESPACE_BEGIN(CryptoPP)
        -:    7:
        -:    8:DOCUMENTED_NAMESPACE_BEGIN(Name)
        -:    9:
        -:   10:#define CRYPTOPP_DEFINE_NAME_STRING(name)	inline const char *name() {return #name;}
        -:   11:
        -:   12:CRYPTOPP_DEFINE_NAME_STRING(ValueNames)			//!< string, a list of value names with a semicolon (';') after each name
        -:   13:CRYPTOPP_DEFINE_NAME_STRING(Version)			//!< int
        -:   14:CRYPTOPP_DEFINE_NAME_STRING(Seed)				//!< ConstByteArrayParameter
        -:   15:CRYPTOPP_DEFINE_NAME_STRING(Key)				//!< ConstByteArrayParameter
        -:   16:CRYPTOPP_DEFINE_NAME_STRING(IV)					//!< ConstByteArrayParameter, also accepts const byte * for backwards compatibility
        -:   17:CRYPTOPP_DEFINE_NAME_STRING(StolenIV)			//!< byte *
        -:   18:CRYPTOPP_DEFINE_NAME_STRING(Rounds)				//!< int
        -:   19:CRYPTOPP_DEFINE_NAME_STRING(FeedbackSize)		//!< int
        -:   20:CRYPTOPP_DEFINE_NAME_STRING(WordSize)			//!< int, in bytes
        -:   21:CRYPTOPP_DEFINE_NAME_STRING(BlockSize)			//!< int, in bytes
        -:   22:CRYPTOPP_DEFINE_NAME_STRING(EffectiveKeyLength)	//!< int, in bits
        -:   23:CRYPTOPP_DEFINE_NAME_STRING(KeySize)			//!< int, in bits
        -:   24:CRYPTOPP_DEFINE_NAME_STRING(ModulusSize)		//!< int, in bits
        -:   25:CRYPTOPP_DEFINE_NAME_STRING(SubgroupOrderSize)	//!< int, in bits
        -:   26:CRYPTOPP_DEFINE_NAME_STRING(PrivateExponentSize)//!< int, in bits
        -:   27:CRYPTOPP_DEFINE_NAME_STRING(Modulus)			//!< Integer
        -:   28:CRYPTOPP_DEFINE_NAME_STRING(PublicExponent)		//!< Integer
        -:   29:CRYPTOPP_DEFINE_NAME_STRING(PrivateExponent)	//!< Integer
        -:   30:CRYPTOPP_DEFINE_NAME_STRING(PublicElement)		//!< Integer
        -:   31:CRYPTOPP_DEFINE_NAME_STRING(SubgroupOrder)		//!< Integer
        -:   32:CRYPTOPP_DEFINE_NAME_STRING(Cofactor)			//!< Integer
        -:   33:CRYPTOPP_DEFINE_NAME_STRING(SubgroupGenerator)	//!< Integer, ECP::Point, or EC2N::Point
        -:   34:CRYPTOPP_DEFINE_NAME_STRING(Curve)				//!< ECP or EC2N
        -:   35:CRYPTOPP_DEFINE_NAME_STRING(GroupOID)			//!< OID
        -:   36:CRYPTOPP_DEFINE_NAME_STRING(PointerToPrimeSelector)		//!< const PrimeSelector *
        -:   37:CRYPTOPP_DEFINE_NAME_STRING(Prime1)				//!< Integer
        -:   38:CRYPTOPP_DEFINE_NAME_STRING(Prime2)				//!< Integer
        -:   39:CRYPTOPP_DEFINE_NAME_STRING(ModPrime1PrivateExponent)	//!< Integer
        -:   40:CRYPTOPP_DEFINE_NAME_STRING(ModPrime2PrivateExponent)	//!< Integer
        -:   41:CRYPTOPP_DEFINE_NAME_STRING(MultiplicativeInverseOfPrime2ModPrime1)	//!< Integer
        -:   42:CRYPTOPP_DEFINE_NAME_STRING(QuadraticResidueModPrime1)	//!< Integer
        -:   43:CRYPTOPP_DEFINE_NAME_STRING(QuadraticResidueModPrime2)	//!< Integer
        -:   44:CRYPTOPP_DEFINE_NAME_STRING(PutMessage)			//!< bool
        -:   45:CRYPTOPP_DEFINE_NAME_STRING(TruncatedDigestSize)	//!< int
        -:   46:CRYPTOPP_DEFINE_NAME_STRING(BlockPaddingScheme)	//!< StreamTransformationFilter::BlockPaddingScheme
        -:   47:CRYPTOPP_DEFINE_NAME_STRING(HashVerificationFilterFlags)		//!< word32
        -:   48:CRYPTOPP_DEFINE_NAME_STRING(AuthenticatedDecryptionFilterFlags)	//!< word32
        -:   49:CRYPTOPP_DEFINE_NAME_STRING(SignatureVerificationFilterFlags)	//!< word32
        -:   50:CRYPTOPP_DEFINE_NAME_STRING(InputBuffer)		//!< ConstByteArrayParameter
        -:   51:CRYPTOPP_DEFINE_NAME_STRING(OutputBuffer)		//!< ByteArrayParameter
        -:   52:CRYPTOPP_DEFINE_NAME_STRING(InputFileName)		//!< const char *
        -:   53:CRYPTOPP_DEFINE_NAME_STRING(InputFileNameWide)	//!< const wchar_t *
        -:   54:CRYPTOPP_DEFINE_NAME_STRING(InputStreamPointer)	//!< std::istream *
        -:   55:CRYPTOPP_DEFINE_NAME_STRING(InputBinaryMode)	//!< bool
        -:   56:CRYPTOPP_DEFINE_NAME_STRING(OutputFileName)		//!< const char *
        -:   57:CRYPTOPP_DEFINE_NAME_STRING(OutputFileNameWide)	//!< const wchar_t *
        -:   58:CRYPTOPP_DEFINE_NAME_STRING(OutputStreamPointer)	//!< std::ostream *
        -:   59:CRYPTOPP_DEFINE_NAME_STRING(OutputBinaryMode)	//!< bool
        -:   60:CRYPTOPP_DEFINE_NAME_STRING(EncodingParameters)	//!< ConstByteArrayParameter
        -:   61:CRYPTOPP_DEFINE_NAME_STRING(KeyDerivationParameters)	//!< ConstByteArrayParameter
    #####:   62:CRYPTOPP_DEFINE_NAME_STRING(Separator)			//< ConstByteArrayParameter
    #####:   63:CRYPTOPP_DEFINE_NAME_STRING(Terminator)			//< ConstByteArrayParameter
    #####:   64:CRYPTOPP_DEFINE_NAME_STRING(Uppercase)			//< bool
    #####:   65:CRYPTOPP_DEFINE_NAME_STRING(GroupSize)			//< int
        -:   66:CRYPTOPP_DEFINE_NAME_STRING(Pad)				//< bool
        -:   67:CRYPTOPP_DEFINE_NAME_STRING(PaddingByte)		//< byte
    #####:   68:CRYPTOPP_DEFINE_NAME_STRING(Log2Base)			//< int
        -:   69:CRYPTOPP_DEFINE_NAME_STRING(EncodingLookupArray)	//< const byte *
    #####:   70:CRYPTOPP_DEFINE_NAME_STRING(DecodingLookupArray)	//< const byte *
        -:   71:CRYPTOPP_DEFINE_NAME_STRING(InsertLineBreaks)	//< bool
        -:   72:CRYPTOPP_DEFINE_NAME_STRING(MaxLineLength)		//< int
        -:   73:CRYPTOPP_DEFINE_NAME_STRING(DigestSize)			//!< int, in bytes
        -:   74:CRYPTOPP_DEFINE_NAME_STRING(L1KeyLength)		//!< int, in bytes
        -:   75:CRYPTOPP_DEFINE_NAME_STRING(TableSize)			//!< int, in bytes
        -:   76:
        -:   77:DOCUMENTED_NAMESPACE_END
        -:   78:
        -:   79:NAMESPACE_END
        -:   80:
        -:   81:#endif
